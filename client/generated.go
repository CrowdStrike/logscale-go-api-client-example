// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// GetViewerResponse is returned by GetViewer on success.
type GetViewerResponse struct {
	// The currently authenticated user's account.
	Viewer GetViewerViewerAccount `json:"viewer"`
}

// GetViewer returns GetViewerResponse.Viewer, and is useful for accessing the field via an interface.
func (v *GetViewerResponse) GetViewer() GetViewerViewerAccount { return v.Viewer }

// GetViewerViewerAccount includes the requested fields of the GraphQL type Account.
// The GraphQL type's documentation follows.
//
// A user account.
type GetViewerViewerAccount struct {
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetUsername returns GetViewerViewerAccount.Username, and is useful for accessing the field via an interface.
func (v *GetViewerViewerAccount) GetUsername() string { return v.Username }

// GetEmail returns GetViewerViewerAccount.Email, and is useful for accessing the field via an interface.
func (v *GetViewerViewerAccount) GetEmail() string { return v.Email }

// GetCreatedAt returns GetViewerViewerAccount.CreatedAt, and is useful for accessing the field via an interface.
func (v *GetViewerViewerAccount) GetCreatedAt() time.Time { return v.CreatedAt }

// UpdateUserEmailResponse is returned by UpdateUserEmail on success.
type UpdateUserEmailResponse struct {
	// Updates a user. Requires Root Permission.
	UpdateUser UpdateUserEmailUpdateUserUpdateUserMutation `json:"updateUser"`
}

// GetUpdateUser returns UpdateUserEmailResponse.UpdateUser, and is useful for accessing the field via an interface.
func (v *UpdateUserEmailResponse) GetUpdateUser() UpdateUserEmailUpdateUserUpdateUserMutation {
	return v.UpdateUser
}

// UpdateUserEmailUpdateUserUpdateUserMutation includes the requested fields of the GraphQL type UpdateUserMutation.
type UpdateUserEmailUpdateUserUpdateUserMutation struct {
	User UpdateUserEmailUpdateUserUpdateUserMutationUser `json:"user"`
}

// GetUser returns UpdateUserEmailUpdateUserUpdateUserMutation.User, and is useful for accessing the field via an interface.
func (v *UpdateUserEmailUpdateUserUpdateUserMutation) GetUser() UpdateUserEmailUpdateUserUpdateUserMutationUser {
	return v.User
}

// UpdateUserEmailUpdateUserUpdateUserMutationUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user profile.
type UpdateUserEmailUpdateUserUpdateUserMutationUser struct {
	Id       string `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

// GetId returns UpdateUserEmailUpdateUserUpdateUserMutationUser.Id, and is useful for accessing the field via an interface.
func (v *UpdateUserEmailUpdateUserUpdateUserMutationUser) GetId() string { return v.Id }

// GetUsername returns UpdateUserEmailUpdateUserUpdateUserMutationUser.Username, and is useful for accessing the field via an interface.
func (v *UpdateUserEmailUpdateUserUpdateUserMutationUser) GetUsername() string { return v.Username }

// GetEmail returns UpdateUserEmailUpdateUserUpdateUserMutationUser.Email, and is useful for accessing the field via an interface.
func (v *UpdateUserEmailUpdateUserUpdateUserMutationUser) GetEmail() string { return v.Email }

// __UpdateUserEmailInput is used internally by genqlient
type __UpdateUserEmailInput struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

// GetUsername returns __UpdateUserEmailInput.Username, and is useful for accessing the field via an interface.
func (v *__UpdateUserEmailInput) GetUsername() string { return v.Username }

// GetEmail returns __UpdateUserEmailInput.Email, and is useful for accessing the field via an interface.
func (v *__UpdateUserEmailInput) GetEmail() string { return v.Email }

// The query or mutation executed by GetViewer.
const GetViewer_Operation = `
query GetViewer {
	viewer {
		username
		email
		createdAt
	}
}
`

func GetViewer(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetViewerResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetViewer",
		Query:  GetViewer_Operation,
	}
	var err_ error

	var data_ GetViewerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by UpdateUserEmail.
const UpdateUserEmail_Operation = `
mutation UpdateUserEmail ($username: String!, $email: String!) {
	updateUser(input: {username:$username,email:$email}) {
		user {
			id
			username
			email
		}
	}
}
`

func UpdateUserEmail(
	ctx_ context.Context,
	client_ graphql.Client,
	username string,
	email string,
) (*UpdateUserEmailResponse, error) {
	req_ := &graphql.Request{
		OpName: "UpdateUserEmail",
		Query:  UpdateUserEmail_Operation,
		Variables: &__UpdateUserEmailInput{
			Username: username,
			Email:    email,
		},
	}
	var err_ error

	var data_ UpdateUserEmailResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
